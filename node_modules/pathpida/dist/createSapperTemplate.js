"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var isIgnored_1 = require("./isIgnored");
var parseQueryFromTS_1 = require("./parseQueryFromTS");
var replaceWithUnderscore_1 = require("./replaceWithUnderscore");
var createMethods = function (indent, importName, pathname, trailingSlash) {
    return indent + "  $url: (url" + ((importName === null || importName === void 0 ? void 0 : importName.startsWith('Query')) ? '' : '?') + ": { " + (importName ? "query" + (importName.startsWith('Optional') ? '?' : '') + ": " + importName + ", " : '') + "hash?: string }) => `" + pathname + (trailingSlash || pathname === '' ? '/' : '') + (importName
        ? importName.startsWith('Query')
            ? "?${dataToURLString(url.query)}"
            : "${url?.query ? `?${dataToURLString(url.query)}` : ''}"
        : '') + "${url" + ((importName === null || importName === void 0 ? void 0 : importName.startsWith('Query')) ? '' : '?') + ".hash ? `#${url.hash}` : ''}`";
};
var parseQueryFromSvelte = function (file, suffix) {
    var fileData = fs_1.default.readFileSync(file, 'utf8');
    var typeName = ['Query', 'OptionalQuery'].find(function (type) {
        return new RegExp("export (interface " + type + " ?{|type " + type + " ?= ?{)").test(fileData);
    });
    if (!typeName)
        return;
    var queryRegExp = new RegExp("\n(.*?)export (interface " + typeName + " ?{|type " + typeName + " ?= ?{)");
    var _a = __read(fileData.split(queryRegExp), 4), indent = _a[1], typeText = _a[2], targetText = _a[3];
    var length = targetText.length;
    var cursor = 0;
    var depth = 1;
    while (depth && cursor <= length) {
        if (targetText[cursor] === '}') {
            depth -= 1;
        }
        else if (targetText[cursor] === '{') {
            depth += 1;
        }
        cursor += 1;
    }
    var importName = "" + typeName + suffix;
    return {
        importName: importName,
        importString: "" + typeText.replace(typeName, importName) + targetText
            .slice(0, cursor)
            .replace(/\r/g, '')
            .replace(new RegExp("\n" + indent, 'g'), '\n') + "\n"
    };
};
exports.default = (function (input, output, ignorePath, trailingSlash) {
    if (trailingSlash === void 0) { trailingSlash = false; }
    var ig = (0, isIgnored_1.createIg)(ignorePath);
    var imports = [];
    var getImportName = function (file) {
        var result = path_1.default.extname(file).startsWith('.ts')
            ? (0, parseQueryFromTS_1.parseQueryFromTS)(output, file, imports.length)
            : parseQueryFromSvelte(file, imports.length);
        if (result) {
            imports.push(result.importString);
            return result.importName;
        }
    };
    var createPathObjString = function (targetDir, importBasePath, indent, url, text, methodsOfIndexTsFile) {
        indent += '  ';
        var files = fs_1.default
            .readdirSync(targetDir)
            .filter(function (file) {
            return [
                !file.startsWith('_'),
                !/\.s?css$/.test(file),
                !file.endsWith('.d.ts'),
                !(0, isIgnored_1.isIgnored)(ig, ignorePath, targetDir, file)
            ].every(Boolean);
        });
        var props = __spreadArray(__spreadArray([], __read(files), false), __read(files
            .filter(function (f) {
            var target = path_1.default.posix.join(targetDir, f);
            return (fs_1.default.statSync(target).isDirectory() &&
                fs_1.default.readdirSync(target).some(function (name) { return name === 'index.json.js'; }));
        })
            .map(function (f) { return f + "/index.json.js"; })), false).sort()
            .map(function (file, _, arr) {
            var _a, _b;
            if (file.includes('/')) {
                var dirname = file.split('/')[0];
                var valFn_1 = "" + indent + (0, replaceWithUnderscore_1.replaceWithUnderscore)(dirname) + "_json: {\n<% next %>\n" + indent + "}";
                var newUrl_1 = url + "/" + dirname + ".json";
                if (dirname.startsWith('[')) {
                    var slug = dirname.slice(1).split(']')[0];
                    valFn_1 = indent + "_" + (0, replaceWithUnderscore_1.replaceWithUnderscore)(dirname.replace(/(\[|])/g, '')) + ": (" + slug + ": string | number) => ({\n<% next %>\n" + indent + "})";
                    newUrl_1 = url + "/${" + slug + "}" + ((_a = dirname.split(']')[1]) !== null && _a !== void 0 ? _a : '') + ".json";
                }
                var target_1 = path_1.default.posix.join(targetDir, file);
                return valFn_1.replace('<% next %>', createMethods(indent, getImportName(target_1), newUrl_1, trailingSlash));
            }
            var basename = path_1.default.basename(file, path_1.default.extname(file));
            var valFn = "" + indent + (0, replaceWithUnderscore_1.replaceWithUnderscore)(basename) + ": {\n<% next %>\n" + indent + "}";
            var newUrl = url + "/" + basename;
            if (basename.startsWith('[')) {
                var slug = basename.slice(1).split(']')[0];
                valFn = indent + "_" + (0, replaceWithUnderscore_1.replaceWithUnderscore)(basename.replace(/(\[|])/g, '')) + ": (" + slug + ": string | number) => ({\n<% next %>\n" + indent + "})";
                newUrl = url + "/${" + slug + "}" + ((_b = basename.split(']')[1]) !== null && _b !== void 0 ? _b : '');
            }
            var target = path_1.default.posix.join(targetDir, file);
            if (fs_1.default.statSync(target).isDirectory()) {
                var indexFile = fs_1.default.readdirSync(target).find(function (name) { return name === 'index.svelte'; });
                return createPathObjString(target, importBasePath + "/" + file, indent, newUrl, valFn.replace('<% next %>', '<% props %>'), indexFile &&
                    createMethods(indent, getImportName(path_1.default.posix.join(target, indexFile)), newUrl, trailingSlash));
            }
            else if (!basename.startsWith('index') && !arr.includes(basename)) {
                return valFn.replace('<% next %>', createMethods(indent, getImportName(target), newUrl, trailingSlash));
            }
            return '';
        })
            .filter(Boolean);
        return text.replace('<% props %>', "" + props.join(',\n') + (methodsOfIndexTsFile ? "" + (props.length ? ',\n' : '') + methodsOfIndexTsFile : ''));
    };
    var rootIndexFile = fs_1.default
        .readdirSync(input)
        .find(function (name) { return path_1.default.basename(name, path_1.default.extname(name)) === 'index'; });
    var rootIndent = '';
    var rootMethods;
    if (rootIndexFile) {
        rootMethods = createMethods(rootIndent, getImportName(path_1.default.posix.join(input, rootIndexFile)), '', trailingSlash);
    }
    var text = createPathObjString(input, '.', rootIndent, '', "{\n<% props %>\n}", rootMethods);
    var importsText = imports.filter(function (i) { return i.startsWith('import'); }).join('\n');
    var queriesText = imports.filter(function (i) { return !i.startsWith('import'); }).join('\n');
    return "" + importsText + (importsText && queriesText ? '\n' : '') + "\n" + queriesText + (imports.length
        ? "\nconst encode = (str: Parameters<typeof encodeURIComponent>[0]) =>\n  encodeURIComponent(str).replace(\n    /[!'()~]|%20|%00/g,\n    match =>\n      (({\n        '!': '%21',\n        \"'\": '%27',\n        '(': '%28',\n        ')': '%29',\n        '~': '%7E',\n        '%20': '+',\n        '%00': '\\x00'\n      } as Record<string, string>)[match])\n  )\n\nexport const dataToURLString = (data: Record<string, any>) =>\n  Object.keys(data)\n    .filter(key => data[key] != null)\n    .map(key =>\n      Array.isArray(data[key])\n        ? data[key].map((v: string) => `${encode(key)}=${encode(v)}`).join('&')\n        : `${encode(key)}=${encode(data[key])}`\n    )\n    .join('&')\n\n"
        : '') + "export const pagesPath = " + text + "\n\nexport type PagesPath = typeof pagesPath\n";
});
//# sourceMappingURL=createSapperTemplate.js.map